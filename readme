# JPort - Full Stack Portfolio Website

A modern portfolio website built with Django backend and Next.js frontend, showcasing projects, skills, and professional information.

## 🏗️ Project Structure

```
jport/                         ← Main project folder
├── db.sqlite3                 ← SQLite database
├── manage.py                  ← Django management script
├── requirements.txt           ← Python dependencies
├── package.json              ← Root package.json (Tailwind CSS)
├── .gitignore    
├── .env                      ← Environment variables
├── venv/                     ← Python virtual environment
└── readme                    ← This file

├── jport/                    ← Django project settings module
│   ├── __init__.py
│   ├── asgi.py
│   ├── settings.py           ← Django settings
│   ├── urls.py               ← Main URL configuration
│   └── wsgi.py

├── portapp/                  ← Django app
│   ├── __init__.py
│   ├── admin.py              ← Admin interface configuration
│   ├── apps.py
│   ├── migrations/           ← Database migrations
│   ├── models.py             ← Database models (Skills, Projects)
│   ├── tests.py
│   ├── urls.py               ← App URL patterns
│   ├── views.py              ← Django views
│   ├── templates/
│   │   └── portapp/
│   │       ├── home.html     ← Django homepage template
│   │       └── about.html    ← Django about page template
│   └── static/
│       ├── css/
│       │   ├── about.css
│       │   └── styles.css
│       └── js/
│           ├── about.js
│           └── scripts.js

└── frontend/                 ← Next.js frontend application
    ├── .next/                ← Compiled output (auto-generated)
    ├── node_modules/         ← Node.js dependencies
    ├── public/               ← Static assets
    │   ├── file.svg
    │   ├── globe.svg
    │   ├── next.svg
    │   ├── qcea.png
    │   ├── sem.png
    │   ├── tic.png
    │   ├── vercel.svg
    │   └── window.svg
    ├── src/                  ← Source code
    │   └── app/              ← Next.js app directory
    │       ├── layout.js     ← Global layout
    │       ├── page.jsx      ← Homepage component
    │       ├── globals.css   ← Global styles
    │       ├── about/        ← About page
    │       │   └── page.jsx
    │       ├── component/    ← Reusable components
    │       │   ├── Footer.js
    │       │   └── Navbar.js
    │       ├── scripts/      ← Utility scripts
    │       │   └── scripts.js
    │       └── styles/       ← Component styles
    │           ├── about.css
    │           └── styles.css
    ├── .gitignore
    ├── eslint.config.mjs     ← ESLint configuration
    ├── jsconfig.json         ← JavaScript configuration
    ├── next.config.mjs       ← Next.js configuration
    ├── package.json          ← Frontend dependencies
    ├── postcss.config.js     ← PostCSS configuration
    ├── tailwind.config.js    ← Tailwind CSS configuration
    └── README.md
```

## 🛠️ Technology Stack

### Backend (Django)
- **Framework**: Django 4.2+
- **Database**: SQLite3 (development)
- **Dependencies**:
  - `python-dotenv` - Environment variable management
  - `Pillow` - Image processing
  - `django-cors-headers` - CORS handling
  - `psycopg2-binary` - PostgreSQL adapter (production ready)

### Frontend (Next.js)
- **Framework**: Next.js 15.3.2
- **UI Library**: React 19.0.0
- **Styling**: 
  - Tailwind CSS 4.1.5
  - Custom CSS
- **Icons**: FontAwesome 6.7.2
- **Build Tools**: PostCSS, Autoprefixer, ESLint

### Development Tools
- **Package Managers**: npm (Node.js), pip (Python)
- **Version Control**: Git
- **Environment**: Python virtual environment

## 🚀 Setup Instructions

### Prerequisites
- Python 3.8+
- Node.js 18+
- npm or yarn

### Backend Setup (Django)
1. **Clone and navigate to project**:
   ```bash
   cd jport
   ```

2. **Create and activate virtual environment**:
   ```bash
   python -m venv venv
   # On Windows:
   venv\Scripts\activate
   # On macOS/Linux:
   source venv/bin/activate
   ```

3. **Install Python dependencies**:
   ```bash
   pip install -r requirements.txt
   ```

4. **Run database migrations**:
   ```bash
   python manage.py migrate
   ```

5. **Create superuser (admin)**:
   ```bash
   python manage.py createsuperuser
   ```

6. **Start Django server**:
   ```bash
   python manage.py runserver
   ```
   Backend will be available at: `http://127.0.0.1:8000/`

### Frontend Setup (Next.js)
1. **Navigate to frontend directory**:
   ```bash
   cd frontend
   ```

2. **Install Node.js dependencies**:
   ```bash
   npm install
   ```

3. **Start development server**:
   ```bash
   npm run dev
   ```
   Frontend will be available at: `http://localhost:3000/`

## 📋 Features

### Core Features
- **Homepage**: Landing page with typewriter animation effect
- **About Page**: Professional information and background
- **Projects Portfolio**: Dynamic project showcase with images
- **Skills Section**: Categorized skills (Frontend, Backend, Database)
- **Admin Interface**: Django admin panel for content management

### Technical Features
- **Responsive Design**: Mobile-first approach with Tailwind CSS
- **Image Upload**: Project images stored in media directory
- **CORS Configuration**: Secure cross-origin communication
- **Environment Variables**: Secure configuration management
- **Database Models**: Skills and Projects with proper relationships

## 🎯 Project Goals

### Essential Sections ✅
1. **Homepage** - Clean intro with typewriter animation
2. **About Me** - Professional background and information
3. **Projects Portfolio** - Dynamic project showcase
4. **Skills** - Categorized technical skills
5. **Admin Interface** - Content management system

### Optional Enhancements 🚀
- Contact form with email integration
- Blog section for articles
- Testimonials from mentors
- Achievements/Certifications showcase
- Interactive resume
- Custom admin interface styling

## 🎨 Visual Enhancements Used

### Libraries & Tools
- **Font Awesome** - Professional icons
- **Tailwind CSS** - Utility-first styling
- **Custom Animations** - Typewriter effect and transitions
- **Responsive Design** - Mobile-friendly layout

### Design Principles
- Clean, modern interface
- Consistent color scheme
- Smooth animations
- Professional typography
- Mobile-first responsive design

## 🔧 Development Commands

### Django Commands
```bash
# Activate virtual environment
venv\Scripts\activate  # Windows
source venv/bin/activate  # macOS/Linux

# Run Django server
python manage.py runserver

# Create superuser
python manage.py createsuperuser

# Make migrations
python manage.py makemigrations

# Apply migrations
python manage.py migrate

# Collect static files
python manage.py collectstatic
```

### Next.js Commands
```bash
# Navigate to frontend
cd frontend

# Install dependencies
npm install

# Start development server
npm run dev

# Build for production
npm run build

# Start production server
npm start

# Run linting
npm run lint
```

## 🌐 Deployment

### Backend (Django)
- **Recommended**: PythonAnywhere, Heroku, or Render
- **Database**: PostgreSQL for production
- **Static Files**: Configure for production serving

### Frontend (Next.js)
- **Recommended**: Vercel, Netlify, or GitHub Pages
- **Build**: `npm run build`
- **Environment**: Configure production environment variables

## 📝 Notes for Professor

This project demonstrates:
- **Full-stack development** with Django and Next.js
- **Modern web technologies** and best practices
- **Database design** with Django ORM
- **API development** and CORS handling
- **Responsive design** with Tailwind CSS
- **Content management** through Django admin
- **Version control** and project organization

The architecture separates frontend and backend concerns while maintaining clean communication through APIs, showcasing understanding of modern web development principles.

## 🔗 Useful Resources

- [Django Documentation](https://docs.djangoproject.com/)
- [Next.js Documentation](https://nextjs.org/docs)
- [Tailwind CSS Documentation](https://tailwindcss.com/docs)
- [Font Awesome](https://fontawesome.com/)
- [CSS Gradient Tool](https://cssgradient.io/)
- [Color Hunt](https://colorhunt.co/)
- [Animate.css](https://animate.style/)
- [AOS (Animate on Scroll)](https://michalsnik.github.io/aos/)
